{"version":3,"sources":["components/UI.js","components/betaNumber.js","App.js","serviceWorker.js","index.js"],"names":["SongsFound","props","value","CustomerInputs","handleSubmit","event","preventDefault","setState","isClicked","songName","data","name","state","lyrics","Axios","post","then","res","handleInputChange","console","log","target","handleReset","this","onSubmit","type","placeholder","onChange","onClick","disabled","Component","BetaNumber","beta","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"sRAGA,SAASA,EAAWC,GAEhB,OACI,6BACI,4BAAKA,EAAMC,Q,IAgERC,E,kDAzDX,WAAYF,GAAO,IAAD,8BACd,cAAMA,IAQVG,aAAe,SAACC,GACZA,EAAMC,iBAEN,EAAKC,SAAS,CAACC,WAAW,IAC1B,EAAKD,SAAS,CAACE,SAAU,4BAEzB,IAAMC,EAAO,CACTC,KAAM,EAAKC,MAAMC,QAGrBC,IAAMC,KAAK,IAAKL,GAAMM,MAAK,SAAAC,GACvB,EAAKV,SAAS,CAACC,WAAW,IAC1B,EAAKD,SAAS,CAACE,SAAUQ,EAAIP,WArBnB,EA0BlBQ,kBAAoB,SAACb,GACjBc,QAAQC,IAAIf,EAAMgB,OAAOV,MACzB,EAAKJ,SAAS,CAAEM,OAASR,EAAMgB,OAAOnB,SA5BxB,EA+BlBoB,YAAc,WACV,EAAKf,SAAS,CAACM,OAAQ,QA9BvB,EAAKD,MAAQ,CACTC,OAAQ,KACRJ,SAAU,KACVD,WAAW,GALD,E,qDAqCd,OAEI,6BAEI,8DACA,2BAAIe,KAAKX,MAAMC,QACf,0BAAMW,SAAUD,KAAKnB,cACjB,2BACI,2BAAOqB,KAAK,OAAOC,YAAY,mBAAmBf,KAAK,OAAOgB,SAAUJ,KAAKL,oBAC7E,4BAAQO,KAAK,QAAQG,QAASL,KAAKD,aAAnC,MAEJ,2BAAG,4BAAQO,SAAUN,KAAKX,MAAMJ,UAAWiB,KAAK,UAA7C,eAGP,kBAACzB,EAAD,CAAYE,MAAOqB,KAAKX,MAAMH,gB,GArDjBqB,aCHdC,E,uKALP,OACI,4CAAkBR,KAAKtB,MAAM+B,U,GAHhBF,aCiBVG,MAdf,WACE,OACE,yBAAKC,UAAU,OACb,yBAAKA,UAAU,YACb,kBAAC,EAAD,CAAYF,KAAK,WAEnB,yBAAKE,UAAU,cACb,uDACA,kBAAC,EAAD,SCDYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB/B,MAAK,SAAAgC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLhC,QAAQgC,MAAMA,EAAMC,c","file":"static/js/main.b2d5f986.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport Axios from 'axios';\n\nfunction SongsFound(props){\n    \n    return (\n        <div>\n            <h5>{props.value}</h5>\n        </div>\n    );\n}\n\nclass CustomerInputs extends Component{\n\n    constructor(props){\n        super(props);\n        this.state = {\n            lyrics: null,\n            songName: null,\n            isClicked: false\n        }\n    }\n\n    handleSubmit = (event) => {\n        event.preventDefault();\n\n        this.setState({isClicked: true});\n        this.setState({songName: \"Searching for Matches..\"});\n\n        const data = {\n            name: this.state.lyrics\n        }\n\n        Axios.post('/', data).then(res => {\n            this.setState({isClicked: false});\n            this.setState({songName: res.data});\n        });\n\n    }\n\n    handleInputChange = (event) => {\n        console.log(event.target.name);\n        this.setState({ lyrics : event.target.value})\n    }\n\n    handleReset = () => {\n        this.setState({lyrics: null})\n    }\n\n    render() {\n        \n        return(\n\n            <div>\n                 \n                <h3>Type lyrics below to find song</h3>\n                <p>{this.state.lyrics}</p>\n                <form onSubmit={this.handleSubmit}>\n                    <p>\n                        <input type=\"text\" placeholder='Type Lyrics Here' name='name' onChange={this.handleInputChange}/>\n                        <button type=\"reset\" onClick={this.handleReset}>X</button>\n                    </p>\n                    <p><button disabled={this.state.isClicked} type=\"submit\">Find Song</button></p>\n                </form>\n\n                <SongsFound value={this.state.songName}/>\n            </div>\n        );\n    }\n}\n\nexport default CustomerInputs","import React, { Component } from 'react';\n\nclass BetaNumber extends Component {\n    render (){\n        return (\n            <h3>Beta Version {this.props.beta}</h3>\n        )};\n}\n\nexport default BetaNumber\n","import React from 'react';\nimport './App.css';\nimport CustomerInputs from './components/UI';\nimport BetaNumber from './components/betaNumber';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"App-beta\">\n        <BetaNumber beta=\"1.0.2\"/>\n      </div>\n      <div className=\"App-header\">\n        <h1>Welcome to Lyric Finder</h1>\n        <CustomerInputs></CustomerInputs>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}